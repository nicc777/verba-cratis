deployments:
- name: sandbox-full-live
  unitTestProfile: false            # If this is a profile to use for unit tests, set to true (equivalent to dry run)
  tasks:                            # List of tasks to include in this deployment profile
  - lambdaFunction                  # Task must be defined under tasks (any task with dependency tasks will also run those tasks)
  globalVariableOverrides:          # Overrides globalVariables
    logFilename: deployment-${build-variable:build_uuid}-testing.log
    logLevel: debug
  templateParametersOverrides:      # Overrides tasks.*.templateParameters
    tableName: verbacratis-test-001-table
  dependsOnProfile:                 # List of dependant profiles that will be run first. Only of all dependant profiles complete successfully will this profile run
  - None                            # Run this profile only after the unittest profile completed successfully
  preDeploymentScript: |
    echo "Running unit tests on deployment ${build-variable:current_deployment_name}"
    echo "You can also perform other tasks here such as AWS EKS kubectl config download, AWS ECR login (required for pushing container images) etc."
  postDeploymentScript: |
    echo "Successfully completed unit tests for deployment ${build-variable:current_deployment_name}"
  deployFromS3:                     # Bucket will be created if it does not exist. If the bucket creation fails, the deployment stops (typical reasons may include permissions and a bucket with this name already existing)
    bucketName: my-deployments


# Provide some default parameter values for helper functions
functionParameterValues:
- name: get_username          # The function get_username() will get the following defined named parameters passed in
  parameters:
  - name: convert_case        # Name of parameter
    type: str                 # Type. The ParameterValue will be cast to this type. Supported types: bool, str, int, float
    value: UPPER              # The actual value to pass to the parameter, which will be cast to the type specified


# Define global variables that can be referenced in tasks by ${ref:globalVariables.variableName}. If a correspondingly named variable is in the deployment profile profileGlobalVariableOverrides, that value will be used instead
globalVariables:
  awsRegion: eu-central-1
  awsAccountId: ${env:AWS_REGION}
  cloudFormationS3Bucket: artifact-bucket-83g-74y-bco-8nx


# Define the deployment logging options - NOTE: Only the build id and access to functions is available for template substitution since logging is setup still in the early stages of the application startup
logging:
  filename: deployment-${build-variable:build_id}.log
  level: debug
  format: '[${build-variable:build_id}] %(asctime)s [%(funcName)s:%(lineno)d] %(levelname)s %(message)s'
  handlers:
  - name: TimedRotatingFileHandler
    parameters:
    - parameterName: filename
      parameterType: string
      parameterValue: out.log
    - parameterName: when
      parameterType: string
      parameterValue: H
    - parameterName: interval
      parameterType: int
      parameterValue: 6
    - parameterName: backupCount
      parameterType: int
      parameterValue: 120
    - parameterName: level
      parameterType: str
      parameterValue: debug
    - parameterName: format
      parameterType: str
      parameterValue: '%(asctime)s %(levelname)s - %(filename)s %(funcName)s:%(lineno)d - %(message)s'
  - name: StreamHandler


# Define tasks, where each task corresponds to the deployment of one CloudFormation template file
tasks:
- name: dynamoDbTable
  template: 
    sourceFile: examples/example_01/cloudformation/dynamodb_table.yaml            # The CloudFormation template
    stackName: example-01-001                                                     # The CloudFormation stack name.
  templateParameters:                                                             # CloudFormation template parameters
  - ParameterName: TableName
    ParameterValue: verbacratis-test-table
  changeSetIfExists: true                                                         # If the named stack already exist, automatically create a change set?
  preDeploymentScript: |
    echo "Starting on task ${build-variable:current_task_name}"
  postDeploymentScript: |
    python3 examples/example_01/scripts/create_sample_datafor_dynamodb_table.py
    sleep 60
    echo "Successfully deployed template ${ref:tasks.dynamoDbTable.template} with ${exports:dynamoDbTable.initialRecordCount} initial records"
  taskExports:                                                                    # Task exports are processed after CloudFormation deployment but before postDeploymentScript
  - ExportName: tableArn
    ExportValue: ${shell:aws dynamodb describe-table --table-name verbacratis-test-table | jq '.Table.TableArn'} 
  - ExportName: initialRecordCount
    ExportValue: ${shell:aws dynamodb scan --table-name messaging --select "COUNT" | jq '.Count'}  
- name: lambdaFunction
  template: 
    sourceFile: examples/example_01/cloudformation/lambda_function.yaml
    stackName: example-01-002
  functionParameterValuesOverrides:                                               # Parameter overrides for helper functions
  - FunctionName: get_username
    ParameterName: convert_case
    ParameterValueType: str
    ParameterValue: LOWER
  templateParameters:
  - ParameterName: FunctionName
    ParameterValue: verbacratis-example-01-${func:get_username()}
  - ParameterName: FunctionZipFile
    ParameterValue: ${ref:globalVariables.cloudFormationS3Bucket}/example-01-lambda.zip
  - ParameterName: DeploymentVersion                                              # We add this parameter (and also as a Lambda Environment Variable) to force CHange Sets for code changes, even if nothing else in the template changes
    ParameterValue: ${build-variable:build_uuid}
  - ParameterName: TableArn
    ParameterValue: ${exports:dynamoDbTable.tableArn}                             # Technically this can be done by a CloudFormation template export/import, but this is just for demonstration purposes.
  changeSetIfExists: true
  preDeploymentScript: |
    export AWS_DEFAULT_REGION=${ref:globalVariables.awsRegion}
    echo "Starting on task ${build-variable:current_task_name}"
    examples/example_01/lambda_function_src/build_and_package.sh --output_file="/tmp/example-01-lambda.zip"
  postDeploymentScript: |
    python3 examples/example_01/scripts/create_sample_datafor_dynamodb_table.py
    echo "Successfully deployed template ${ref:tasks.dynamoDbTable.template} with initial record count set to ${exports:dynamoDbTable.initialRecordCount}. Task completed at ${exports:lambdaFunction.finalFinishTimestamp}"
  extraBucketArtifacts:                                                           # List extra files that need to be copied to the S3 deployment bucket. Processed after preDeploymentScript, but before the cloudformation deployment.
  - /tmp/example-01-lambda.zip                                                    # The Lambda ZIP file created during the preDeploymentScript
  taskDependsOn: 
  - dynamoDbTable    
  taskExports:
  - ExportName: finalFinishTimestamp
    ExportValue: ${shell:date}  
  