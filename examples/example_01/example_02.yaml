---
apiVersion: v1-alpha
kind: Environment
metadata:
  name: dev                                     # The name of the environment.
  labels:
    phase: deployment
    targetAccountName: sandbox
spec:
  authentication:
    aws:                                        # AWS Specific credentials
      useProfile: true                          # OPTIONAL: Default=false assuming then that the standard AWS CLI Environment Variables are used
      defaultProfileName: AwsDevProfileName     # OPTIONAL, but required if "useProfile" is "true" - Automatically sets the environment variable "PROFILE". Used by the cloud provider code.
---
apiVersion: v1-alpha
kind: Environment
metadata:
  name: test                                    # The name of the environment.
  labels:
    phase: deployment
    targetAccountName: qa
spec:
  authentication:
    aws:                                        # AWS Specific credentials
      useProfile: true                          # OPTIONAL: Default=false assuming then that the standard AWS CLI Environment Variables are used
      defaultProfileName: AwsTestProfileName    # OPTIONAL, but required if "useProfile" is "true" - Automatically sets the environment variable "PROFILE". Used by the cloud provider code.
---
apiVersion: v1-alpha
kind: Environment
metadata:
  name: prod                                    # The name of the environment.
  labels:
    phase: deployment
    targetAccountName: prod
spec:
  authentication:
    aws:                                        # AWS Specific credentials
      useProfile: true                          # OPTIONAL: Default=false assuming then that the standard AWS CLI Environment Variables are used
      defaultProfileName: AwsProdProfileName    # OPTIONAL, but required if "useProfile" is "true" - Automatically sets the environment variable "PROFILE". Used by the cloud provider code.
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: generateS3BucketName
spec:
  interpreter: python3
  outputParser: string                          # The output will be stored in a string value and will be available in the variable named "generateS3BucketName"
  onFail:
    returnSuccess: true                         # Or FALSE - will result in Exception being thrown
    returnValue: example-bucket-name            # Only required if returnSuccess is TRUE
  data: >
    #!/usr/bin/env python3
    
    import argparse
    parser = argparse.ArgumentParser(description='Generate a Bucket Name')
    parser.add_argument('--env', metavar='S', type=str, help='The environment name')
    environment_name = 'unknown-environment'
    try:
        args = parser.parse_args()
        if args.env is not None:
            tmp_name = '{}'.format(args.env)
            if isinstance(tmp_name, str):
                if len(tmp_name) > 0 and len(tmp_name) < 17:
                    environment_name = tmp_name
    except:
        environment_name = 'none'
    print('some-example-bucket-{}'.format(environment_name))
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: echoGeneralDeploymentInfo
spec:
  interpreter: sh
  outputParser: none                            # none -> The output will not be parsed
  onFail:
    returnSuccess: true                         # Or FALSE - will result in Exception being thrown
    returnValue: ""                             # Only required if returnSuccess is TRUE
  data: >
    echo "Running in Environment                : ${Environment:raw:metadata.name}"
    echo "Bucket name to be created             : ${ShellScript:computed:generateS3BucketName}"
    echo "Environment Bucket Name               : ${EnvironmentVariables:computed:S3ArtifactBucket}"
    echo "Environment                           : ${Environment:raw:metadata.name}"
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: emptyS3Bucket
spec:
  interpreter: sh
  outputParser: none                            # none -> The output will not be parsed
  onFail:
    returnSuccess: false                        # Or FALSE - will result in Exception being thrown
    returnValue: "Failed to empty S3 bucket"    # On exception, the returnValue will be printed in the error message
  data: >
    echo "This script deletes the contents of an S3 bucket
    aws s3 rm s3://${EnvironmentVariables:computed:S3ArtifactBucket} --recursive  --region $AWS_REGION --profile $AWS_PROFILE"
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: deleteS3Bucket
spec:
  interpreter: sh
  outputParser: none                            # none -> The output will not be parsed
  onFail:
    returnSuccess: false                        # Or FALSE - will result in Exception being thrown
    returnValue: "Failed to empty S3 bucket"    # On exception, the returnValue will be printed in the error message
  data: >
    echo "This script deletes a S3 bucket
    aws s3api delete-bucket --bucket ${EnvironmentVariables:computed:S3ArtifactBucket} --recursive --region $AWS_REGION --profile $AWS_PROFILE"    
---
apiVersion: v1-alpha
kind: EnvironmentVariables
metadata:
  name: dev-environment-variables
  labels:
    environment: dev                            # Links to Environment.metadata.name - iof not set, defaults to "default"
spec:
  staticValues:
  - name: awsRegion
    value: eu-central-1
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_REGION
  dynamicValues:
  - name: S3ArtifactBucket
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: S3_ARTIFACT_BUCKET_NAME
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: ShellScript
      name: generateS3BucketName                # Reference to the name of the Kind of source
      #commandLineArgument: "1 2 3"             # Set all command line arguments as a single string - if "commandLineArguments" is also supplied, those will be put first and these appended
      commandLineArguments:                     # Alternatively, set named command line arguments
        env: dev                                # Will be passed as "--env dev"
      outputParser: asString                    # OPTIONAL: Default=string. For now this is the only accepted option
      stripLeadingSpaces: true                  # OPTIONAL: Default=true
      stripTrailingSpaces: true                 # OPTIONAL: Default=true
      cacheOutput: true                         # OPTIONAL: Default=true - once the script is run, the return value will be cached and re-used in subsequent calls to the script FOR THIS ENVIRONMENT
  - name: awsProfile
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_PROFILE
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_PROFILE                         # Use the value from this shell environment variable name
      default: default                          # OPTIONAL: Default=<empty string>
---
apiVersion: v1-alpha
kind: EnvironmentVariables
metadata:
  name: test-environment-variables
  labels:
    environment: test                           # Links to Environment.metadata.name - iof not set, defaults to "default"
spec:
  staticValues:
  - name: awsRegion
    value: eu-central-1
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_REGION
  dynamicValues:
  - name: S3ArtifactBucket
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: S3_ARTIFACT_BUCKET_NAME
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: ShellScript
      name: generateS3BucketName                # Reference to the name of the Kind of source
      #commandLineArgument: "1 2 3"             # Set all command line arguments as a single string - if "commandLineArguments" is also supplied, those will be put first and these appended
      commandLineArguments:                     # Alternatively, set named command line arguments
        env: test                               # Will be passed as "--env test"
      outputParser: asString                    # OPTIONAL: Default=string. For now this is the only accepted option
      stripLeadingSpaces: true                  # OPTIONAL: Default=true
      stripTrailingSpaces: true                 # OPTIONAL: Default=true
      cacheOutput: true                         # OPTIONAL: Default=true - once the script is run, the return value will be cached and re-used in subsequent calls to the script FOR THIS ENVIRONMENT
  - name: awsProfile
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_PROFILE
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_PROFILE                         # Use the value from this shell environment variable name
      default: default                          # OPTIONAL: Default=<empty string>
---
apiVersion: v1-alpha
kind: EnvironmentVariables
metadata:
  name: prod-environment-variables
  labels:
    environment: prod                           # Links to Environment.metadata.name - iof not set, defaults to "default"
spec:
  staticValues:
  - name: awsRegion
    value: eu-central-1
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_REGION
  dynamicValues:
  - name: S3ArtifactBucket
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: S3_ARTIFACT_BUCKET_NAME
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: ShellScript
      name: generateS3BucketName                # Reference to the name of the Kind of source
      #commandLineArgument: "1 2 3"             # Set all command line arguments as a single string - if "commandLineArguments" is also supplied, those will be put first and these appended
      commandLineArguments:                     # Alternatively, set named command line arguments
        env: prod                               # Will be passed as "--env prod"
      outputParser: asString                    # OPTIONAL: Default=string. For now this is the only accepted option
      stripLeadingSpaces: true                  # OPTIONAL: Default=true
      stripTrailingSpaces: true                 # OPTIONAL: Default=true
      cacheOutput: true                         # OPTIONAL: Default=true - once the script is run, the return value will be cached and re-used in subsequent calls to the script FOR THIS ENVIRONMENT
  - name: awsProfile
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_PROFILE
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_PROFILE                         # Use the value from this shell environment variable name
      default: default                          # OPTIONAL: Default=<empty string>
---
apiVersion: v1-alpha
kind: InfrastructureTemplate                    # During deployment, this will create a temporary manifest file which can be referenced with ${InfrastructureTemplate:reference:<<value of metadata.name>>} (points to the temporary file)
metadata:
  name: s3-artifact-bucket-template
spec:
  #source: /path/to/template.yaml               # If set, "data" is ignored. Relative paths are processed from the current working directory
  data: >
    AWSTemplateFormatVersion: "2010-09-09"
    Description: >
      This is a S3 bucket used for
      storing various artifacts     
      during deployment
    Parameters:
      BucketNameParameter:
        Type: String
      SomeOtherParam:
        Type: String
    Resources:
      S3Bucket:
        Type: 'AWS::S3::Bucket'
        DeletionPolicy: Retain
        Properties:
          BucketName: !Ref BucketNameParameter
    Outputs:
      BucketName:
        Value: !Ref S3Bucket
        Description: 'Name of the bucket with default values'
  environmentVariableToParameterMap:            # Optional, but required if there are parameters defined without default values
  - parameterName: BucketNameParameter
    value:
      source: 
        type: EnvironmentVariables
        name: S3ArtifactBucket
  - parameterName: SomeOtherParam
    value:
      source: 
        type: ShellEnvironment                  # Special kind of source that refers to a shell environment variable
        name: USER                              # Will get the value of the environment variable $USER
  ifExists:                                     # What actions to take if the template was already deployed. This is a default action and can be overridden during actual deployments
    update: false                               # OPTIONAL: Default=false - If the template has been deployed previously, should changes be applied with a change-set (AWS). If value is false, essentially already deployed stacks will be ignored
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: echoGeneralDeploymentInfo
spec:
  environments:
  - dev
  - test
  - prod
  action:
    type: ShellScript
    name: echoGeneralDeploymentInfo
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: emptyS3Bucket
spec:
  environments:
  - dev
  - test
  action:
    type: ShellScript
    name: emptyS3Bucket
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: deleteS3Bucket
spec:
  environments:
  - dev
  - test
  action:
    type: ShellScript
    name: deleteS3Bucket
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: deployS3Bucket
spec:
  environments:
  - dev
  - test
  - prod
  action:
    type: InfrastructureTemplate
    provider: AWS                               # Each cloud provider must have a provide that knows how to deploy an infrastructure template
    name: s3-artifact-bucket-template
---
apiVersion: v1-alpha
kind: Deployment
metadata:
  name: deployS3Bucket
spec:
  environments:
  - dev
  - test
  - prod
  tasks:
  - order: 100                                  # All tasks will be executed in numerical order. To make change management and change tracking easier, you can keep gaps between numbers.
    task: echoGeneralDeploymentInfo
  - order: 200
    task: emptyS3Bucket
  - order: 300
    task: deleteS3Bucket
  - order: 400
    task: deployS3Bucket