---
apiVersion: v1-alpha
kind: Environment
metadata:
  name: dev                                     # The name of the environment.
  labels:
    phase: deployment
    targetAccountName: sandbox
spec:
  authentication:
    aws:                                        # AWS Specific credentials
      useProfile: true                          # OPTIONAL: Default=false assuming then that the standard AWS CLI Environment Variables are used
      profileName: AwsDevProfileName            # OPTIONAL, but required if "useProfile" is "true" - Automatically sets the environment variable "PROFILE". Used by the cloud provider code.
      region: eu-central-1                      # OPTIONAL, default=eu-central-1
---
apiVersion: v1-alpha
kind: Environment
metadata:
  name: test                                    # The name of the environment.
  labels:
    phase: deployment
    targetAccountName: qa
spec:
  authentication:
    aws:                                        # AWS Specific credentials - in this example we obtain the credentials from the environment
      awsAccessKeyId: ${EnvironmentVariables:computed:awsAccessKeyId}
      awsSecretAccessKey: ${EnvironmentVariables:computed:awsSecretAccessKey}
---
apiVersion: v1-alpha
kind: Environment
metadata:
  name: prod                                    # The name of the environment.
  labels:
    phase: deployment
    targetAccountName: prod
spec:
  authentication:
    aws:                                        # AWS Specific credentials
      useProfile: true                          # OPTIONAL: Default=false assuming then that the standard AWS CLI Environment Variables are used
      profileName: AwsProdProfileName           # OPTIONAL, but required if "useProfile" is "true" - Automatically sets the environment variable "PROFILE". Used by the cloud provider code.
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: generateS3BucketName
spec:
  environments:
  - dev
  - test
  - prod
  interpreter: python3
  outputParser: string                          # The output will be stored in a string value and will be available in the variable named "generateS3BucketName"
  onFail:
    returnSuccess: true                         # Or FALSE - will result in Exception being thrown
    returnValue: example-bucket-name            # Only required if returnSuccess is TRUE
  data: >
    #!/usr/bin/env python3
    
    import argparse
    parser = argparse.ArgumentParser(description='Generate a Bucket Name')
    parser.add_argument('--env', metavar='S', type=str, help='The environment name')
    environment_name = 'unknown-environment'
    try:
        args = parser.parse_args()
        if args.env is not None:
            tmp_name = '{}'.format(args.env)
            if isinstance(tmp_name, str):
                if len(tmp_name) > 0 and len(tmp_name) < 17:
                    environment_name = tmp_name
    except:
        environment_name = 'none'
    print('some-example-bucket-{}'.format(environment_name))
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: echoGeneralDeploymentInfo
spec:
  environments:
  - dev
  - test
  - prod
  interpreter: sh
  outputParser: none                            # none -> The output will not be parsed
  onFail:
    returnSuccess: true                         # Or FALSE - will result in Exception being thrown
    returnValue: ""                             # Only required if returnSuccess is TRUE
  data: >
    echo "Running in Environment                : ${Environment:name}"
    echo "Bucket name to be created             : ${ShellScript:computed:generateS3BucketName}"
    echo "Environment Bucket Name               : ${EnvironmentVariables:computed:S3ArtifactBucket}"
    echo "Environment                           : ${Environment:name}"
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: emptyS3Bucket
spec:
  environments:
  - dev
  - test
  - prod
  interpreter: sh
  outputParser: none                            # none -> The output will not be parsed
  onFail:
    returnSuccess: false                        # Or FALSE - will result in Exception being thrown
    returnValue: "Failed to empty S3 bucket"    # On exception, the returnValue will be printed in the error message
  data: >
    echo "This script deletes the contents of an S3 bucket
    aws s3 rm s3://${EnvironmentVariables:computed:S3ArtifactBucket} --recursive  --region $AWS_REGION --profile $AWS_PROFILE"
---
apiVersion: v1-alpha
kind: ShellScript
metadata:
  name: deleteS3Bucket
spec:
  environments:
  - dev
  - test
  - prod
  interpreter: sh
  outputParser: none                            # none -> The output will not be parsed
  onFail:
    returnSuccess: false                        # Or FALSE - will result in Exception being thrown
    returnValue: "Failed to empty S3 bucket"    # On exception, the returnValue will be printed in the error message
  data: >
    echo "This script deletes a S3 bucket
    aws s3api delete-bucket --bucket ${EnvironmentVariables:computed:S3ArtifactBucket} --recursive --region $AWS_REGION --profile $AWS_PROFILE"    
---
apiVersion: v1-alpha
kind: EnvironmentVariables
metadata:
  name: dev-environment-variables
spec:
  environments:
  - dev
  staticValues:
  - name: awsRegion
    value: eu-central-1
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_REGION
  dynamicValues:
  - name: S3ArtifactBucket
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: S3_ARTIFACT_BUCKET_NAME
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: ShellScript
      name: generateS3BucketName                # Reference to the name of the Kind of source
      #commandLineArgument: "1 2 3"             # Set all command line arguments as a single string - if "commandLineArguments" is also supplied, those will be put first and these appended
      commandLineArguments:                     # Alternatively, set named command line arguments
        env: ${Environment:name}                # Will be passed as "--env dev"
      outputParser: asString                    # OPTIONAL: Default=string. For now this is the only accepted option
      stripLeadingSpaces: true                  # OPTIONAL: Default=true
      stripTrailingSpaces: true                 # OPTIONAL: Default=true
      cacheOutput: true                         # OPTIONAL: Default=true - once the script is run, the return value will be cached and re-used in subsequent calls to the script FOR THIS ENVIRONMENT
  - name: awsProfile
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_PROFILE
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_PROFILE                         # Use the value from this shell environment variable name
      default: default                          # OPTIONAL: Default=<empty string>
---
apiVersion: v1-alpha
kind: EnvironmentVariables
metadata:
  name: test-environment-variables
spec:
  environments:
  - test
  staticValues:
  - name: awsRegion
    value: eu-central-1
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_REGION
  dynamicValues:
  - name: S3ArtifactBucket
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: S3_ARTIFACT_BUCKET_NAME
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: ShellScript
      name: generateS3BucketName                # Reference to the name of the Kind of source
      #commandLineArgument: "1 2 3"             # Set all command line arguments as a single string - if "commandLineArguments" is also supplied, those will be put first and these appended
      commandLineArguments:                     # Alternatively, set named command line arguments
        env: ${Environment:name}                # Will be passed as "--env test"
      outputParser: asString                    # OPTIONAL: Default=string. For now this is the only accepted option
      stripLeadingSpaces: true                  # OPTIONAL: Default=true
      stripTrailingSpaces: true                 # OPTIONAL: Default=true
      cacheOutput: true                         # OPTIONAL: Default=true - once the script is run, the return value will be cached and re-used in subsequent calls to the script FOR THIS ENVIRONMENT
  - name: awsAccessKeyId
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_ACCESS_KEY_ID
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_ACCESS_KEY_ID                   # Use the value from this shell environment variable name
      default: ""                               # OPTIONAL: Default=<empty string>
  - name: awsSecretAccessKey
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_SECRET_ACCESS_KEY
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_SECRET_ACCESS_KEY               # Use the value from this shell environment variable name
      default: ""                               # OPTIONAL: Default=<empty string>
---
apiVersion: v1-alpha
kind: EnvironmentVariables
metadata:
  name: prod-environment-variables
spec:
  environments:
  - prod
  staticValues:
  - name: awsRegion
    value: eu-central-1
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_REGION
  dynamicValues:
  - name: S3ArtifactBucket
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: S3_ARTIFACT_BUCKET_NAME
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: ShellScript
      name: generateS3BucketName                # Reference to the name of the Kind of source
      #commandLineArgument: "1 2 3"             # Set all command line arguments as a single string - if "commandLineArguments" is also supplied, those will be put first and these appended
      commandLineArguments:                     # Alternatively, set named command line arguments
        env: ${Environment:name}                # Will be passed as "--env prod"
      outputParser: asString                    # OPTIONAL: Default=string. For now this is the only accepted option
      stripLeadingSpaces: true                  # OPTIONAL: Default=true
      stripTrailingSpaces: true                 # OPTIONAL: Default=true
      cacheOutput: true                         # OPTIONAL: Default=true - once the script is run, the return value will be cached and re-used in subsequent calls to the script FOR THIS ENVIRONMENT
  - name: awsProfile
    shellEnvironment:
      expose: true
      shellEnvironmentVariableName: AWS_PROFILE
    source:                                     # From where is it obtained (Kind) - the output from the shell script will be the value set
      kind: shellEnvironment                    # "shellEnvironment" is a special kind that reads the shell environment variable names and values at the time of execution of the deployment
      name: AWS_PROFILE                         # Use the value from this shell environment variable name
      default: default                          # OPTIONAL: Default=<empty string>
---
apiVersion: v1-alpha
kind: InfrastructureTemplate                    # During deployment, this will create a temporary manifest file which can be referenced with ${InfrastructureTemplate:reference:<<value of metadata.name>>} (points to the temporary file)
metadata:
  name: s3-artifact-bucket-template
spec:
  environments:
  - dev
  - test
  - prod
  #source: /path/to/template.yaml               
  sourceType: data                              # REQUIRED - Determines the source of the template. Valid values: "data" (see data section below), "local-file" (path to a file name, absolute or relative to current working directory), or "url", with the "source" pointing to a URL to which a GET request will be executed.
  # urlHeaders:                                   # OPTIONAL, Default=None - only useful when "sourceType" is "url".
  #   Authorization: bearer xyz
  data: >
    AWSTemplateFormatVersion: "2010-09-09"
    Description: >
      This is a S3 bucket used for
      storing various artifacts     
      during deployment
    Parameters:
      BucketNameParameter:
        Type: String
      SomeOtherParam:
        Type: String
    Resources:
      S3Bucket:
        Type: 'AWS::S3::Bucket'
        DeletionPolicy: Retain
        Properties:
          BucketName: !Ref BucketNameParameter
    Outputs:
      BucketName:
        Value: !Ref S3Bucket
        Description: 'Name of the bucket with default values'
  environmentVariableToParameterMap:            # Optional, but required if there are parameters defined without default values
  - parameterName: BucketNameParameter
    value:
      source: 
        type: EnvironmentVariables
        name: S3ArtifactBucket
  - parameterName: SomeOtherParam
    value:
      source: 
        type: ShellEnvironment                  # Special kind of source that refers to a shell environment variable
        name: USER                              # Will get the value of the environment variable $USER
  ifExists:                                     # What actions to take if the template was already deployed. This is a default action and can be overridden during actual deployments
    update: false                               # OPTIONAL: Default=false - If the template has been deployed previously, should changes be applied with a change-set (AWS). If value is false, essentially already deployed stacks will be ignored
  providers:
    deployment: AWS-CloudFormation-Deployment
    rollBack: none                              # For AWS no roll back providers are defined - we rely on the boto3 configuration (see below)
  providerConfiguration:                        # AWS Specific Configuration
    stackName: S3ArtifactBucket
    ifStackExists: ChangeSet                    # OPTIONAL, default=Skip - There are two options: "Skip" or "ChangeSet"
    waitForCompletion: true                     # OPTIONAL, default=true - If false, the deployment will continue in the background and the function will return. Otherwise, we wait until the stack is deployed.
    waitTimeout: 3600                           # OPTIONAL, default=600 - If "waitForCompletion" is set to true, the timeout can be set here.
    onTimeout: fail                             # OPTIONAL, default=fail - Set the failure behavior. Valid options: "fail" or "continue"
    boto3DeploymentOptions:                     # Refer to https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudformation.html#CloudFormation.Client.create_stack - will trigger if there are no previous successful deployments of this stack 
      TimeoutInMinutes: 60
      # NotificationARNs:
      # - xxx
      # Capabilities:
      # - CAPABILITY_IAM
      # RoleARN: xxx
      OnFailure: DELETE
      EnableTerminationProtection: false
      # StackPolicyBody: xxx
      # StackPolicyURL: xxx
    boto3UpdateOptions:                         # Refer to https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/cloudformation.html#CloudFormation.Client.update_stack - Triggers when there are a previous successful deployment
      TimeoutInMinutes: 60
      # NotificationARNs:
      # - xxx
      # Capabilities:
      # - CAPABILITY_IAM
      # RoleARN: xxx
      OnFailure: DELETE
      EnableTerminationProtection: false
      # StackPolicyBody: xxx
      # StackPolicyURL: xxx
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: echoGeneralDeploymentInfo
spec:
  environments:
  - dev
  - test
  - prod
  action:
    type: ShellScript
    name: echoGeneralDeploymentInfo
  providerConfiguration:
      runEveryDeployment: false                 # OPTIONAL: Default=false - ShellScript always run on the first deployment, but this setting determines if it should also run with subsequent deployments, where the previous deployment was successful
      returnResultWhenSkipped: success          # OPTIONAL: Default=true - If "runEveryDeployment" is false, determine if the skipped action must result in a "success" or "fail" response
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: emptyS3Bucket
spec:
  environments:
  - dev
  - test
  action:
    type: ShellScript
    name: emptyS3Bucket
    providerConfiguration:
      runEveryDeployment: true                  # OPTIONAL: Default=false - ShellScript always run on the first deployment, but this setting determines if it should also run with subsequent deployments, where the previous deployment was successful
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: deleteS3Bucket
spec:
  environments:
  - dev
  - test
  action:
    type: ShellScript
    name: deleteS3Bucket
    providerConfiguration:
      runEveryDeployment: true                  # OPTIONAL: Default=false - ShellScript always run on the first deployment, but this setting determines if it should also run with subsequent deployments, where the previous deployment was successful
---
apiVersion: v1-alpha
kind: Task
metadata:
  name: deployS3Bucket
spec:
  environments:
  - dev
  - test
  - prod
  action:
    type: InfrastructureTemplate
    name: s3-artifact-bucket-template           # Reference to the InfrastructureTemplate name
    provider: AWS-CloudFormation                # Each cloud provider must have a provide that knows how to deploy an infrastructure template
    providerConfiguration:
      stackName: S3ArtifactBucket
      noManifestChangesAction: skip-success     # OPTIONAL: Default=skp-success - which is currently the only option. Will skip the step and return success.
      manifestChangesAction: change-set         # OPTIONAL: Default=change-set - Can be either "skip-success" or "change-set"
      deleteAction: delete                      # OPTIONAL: Default=delete - Either "delete" or "skip". The "delete" option, deletes the CloudFOrmation stack
    rollbackAction:
      provider: AWS
---
apiVersion: v1-alpha
kind: Deployment
metadata:
  name: deployS3Bucket
spec:
  environments:
  - dev
  - test
  - prod
  notifications:
  - provider: REST                              # OPTIONAL, default=None - providers must be defined in src/verbacratis/notification_providers/registered_providers.py 
    globalConfiguration:                        # For REST, we use Python3 urllib. If you need to send AWS SNS messages, expose the with a Lambda URL or some other HTTP end-point and that way you can also send e-mails, SMS etc.
      URL: "http://localhost:5000/test"
      method: POST
      ContentType: "application/json"
  preDeployment:
    notification:                               
    - Provider: REST
      Message: '{"Deployment": "deployS3Bucket", "Status": "starting", "Environment": "${Environment:name}"}'
  postDeployment:
    notification:                               
    - Provider: REST
      Message: '{"Deployment": "deployS3Bucket", "Status": "deployed", "Environment": "${Environment:name}"}}'
  deploymentTasks:
  - order: 100                                  # All tasks will be executed in numerical order. To make change management and change tracking easier, you can keep gaps between numbers.
    task: echoGeneralDeploymentInfo
    preExecution:
      notification:                               # Notification Provider Specific configuration. For SNS, see https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish
      - Provider: REST
        Message: '{"Task": "echoGeneralDeploymentInfo", "Status": "starting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification:                               # Notification Provider Specific configuration. For SNS, see https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish
      - Provider: REST
        Message: '{"Task": "echoGeneralDeploymentInfo", "Status": "failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:                               # Notification Provider Specific configuration. For SNS, see https://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/sns.html#SNS.Client.publish
      - Provider: REST
        Message: '{"Task": "echoGeneralDeploymentInfo", "Status": "success", "Environment": "${Environment:name}"}}'
  - order: 200                                  # Tasks not linked to this environment will be skipped automatically
    task: emptyS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "emptyS3Bucket", "Status": "starting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification: 
      - Provider: REST
        Message: '{"Task": "emptyS3Bucket", "Status": "failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "emptyS3Bucket", "Status": "success", "Environment": "${Environment:name}"}}'
  - order: 300
    task: deleteS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "deleteS3Bucket", "Status": "starting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification: 
      - Provider: REST
        Message: '{"Task": "deleteS3Bucket", "Status": "failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "deleteS3Bucket", "Status": "success", "Environment": "${Environment:name}"}}'
  - order: 400
    task: deployS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "starting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      rollbackDelay: 300                        # Time to wait for before rollback tasks commence. This is handy for AWS CloudFOrmation rollbacks that may be running in the background
      rollBackTasks:                            # The tasks to execute during rollback
      - order: 100                                  
        task: emptyS3Bucket
      - order: 200                                  
        task: deleteS3Bucket
      notification: 
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "success", "Environment": "${Environment:name}"}}'
  deleteDeploymentTasks:
  - order: 100
    task: deployS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "deleting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification: 
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "delete-failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "deleted", "Environment": "${Environment:name}"}}'
  - order: 200                                  # Tasks not linked to this environment will be skipped automatically
    task: emptyS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "emptyS3Bucket", "Status": "deleting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification: 
      - Provider: REST
        Message: '{"Task": "emptyS3Bucket", "Status": "delete-failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "emptyS3Bucket", "Status": "deleted", "Environment": "${Environment:name}"}}'
  - order: 300
    task: deleteS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "deleteS3Bucket", "Status": "deleting", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification: 
      - Provider: REST
        Message: '{"Task": "deleteS3Bucket", "Status": "delete-failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "deleteS3Bucket", "Status": "deleted", "Environment": "${Environment:name}"}}'
  updateDeploymentTasks:                        # Run only on subsequent deployments if there was at least one successful deployment in the past
  - order: 100
    task: deployS3Bucket
    preExecution:
      notification: 
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "updating", "Environment": "${Environment:name}"}}'
    onError:
      stopExecution: true
      notification: 
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "update-failed", "Environment": "${Environment:name}"}}'
    onSuccess:
      notification:
      - Provider: REST
        Message: '{"Task": "deployS3Bucket", "Status": "success", "Environment": "${Environment:name}"}}'
  rules:
    tasksNotLinkedToEnvironment: skip           # Optional, DEFAULT=skip - for now this is the only option
    runNotificationOnSkippedTasks: false        # Optional, DEFAULT=false - If false, do not process "preExecution" or "onError" or "onSuccess" NOTIFICATIONS
  # dependencies:                                 # All named deployments listed here will be executed first.
  # - deploymentName: dummy1
  # - deploymentName: dummy2
